---
########################################
#   servers
########################################
servers:
  primary:
    address: :6700
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

  metrics:
    address: :6701
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

  health:
    address: :6702
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

prometheus:
  defaultNamespace: xmidt
  defaultSubsystem: hecate

health:
  disableLogging: false
  custom:
    server: (( grab server ))

########################################
#   labeling/tracing via http headers configuration
########################################

# The unique fully-qualified-bucket-name of the server.
# (Optional)
server: (( grab $HOSTNAME || "hecate" ))

# Provides this build number to the X-transition-Build header for
# showing machine version information.  The build number SHOULD
# match the scheme `version-build` but there is not a strict requirement.
# (Optional)
build: (( grab $BUILD || "unknown" ))

# Provides the region information to the X-transition-Region header
# for showing what region this machine is located in.  The region
# is arbitrary and optional.
# (Optional)
region: east

# Provides the flavor information to the X-transition-Flavor header
# for showing what flavor this machine is associated with.  The flavor
# is arbitrary and optional.
# (Optional)
flavor: mint

# stage is used for doing complex spruce manipulation
# change this will only effect spruce and the vars referencing it
stage: (( grab $STAGE || "development" ))

########################################
#   Logging Related Configuration
########################################

# log configures the logging subsystem details
log:
  # file is the name of the most recent log file.  If set to "stdout" this
  # will log to os.Stdout.
  # (Optional) defaults to os.TempDir()
  file: "stdout"

  # level is the logging level to use - INFO, DEBUG, WARN, ERROR
  # (Optional) defaults to ERROR
  level: (( grab $LOG_LEVEL || "INFO" ))

  # maxsize is the maximum file size in MB
  # (Optional) defaults to max 100MB
  maxsize: 50

  # maxage is the maximum number of days to retain old log files
  # (Optional) defaults to ignore age limit (0)
  maxage: 30

  # maxbackups is the maximum number of old log files to retain
  # (Optional) defaults to retain all (0)
  maxbackups: 10

  # json is a flag indicating whether JSON logging output should be used.
  # (Optional) defaults to false
  json: true

##############################################################################
# Webhooks Related configuration
##############################################################################

# The unique fully-qualified-domain-name of the server.  The webhooks library uses it
# to know which host to use to confirm this service is ready to receive events
# (Optional if not running webhooks)
fqdn: hecate

# If set to true, message exchange with SNS over HTTP is done without TLS.
disableSnsTls: (( grab $DISABLE_SNS_TLS || false ))

# start contains configuration for the logic by which this service can
# fetch the current webhooks without having to wait for SNS
# It does so by pinging the rest of the cluter at the specified apiPath
# More details at https://godoc.org/github.com/xmidt-org/webpa-common/webhook#StartConfig
start:
  # duration is the max amount of time allowed to wait for webhooks data to be retrieved
  duration: "20s"

  # path used to query the existing webhooks
  apiPath: http://localhost:6100/hooks

########################################
# SNS - Webhooks DNS readiness Configuration
########################################

# WaitForDns is the duration the webhooks library will wait for this server's DNS record to be
# propagated. This waiting logic is important so AWS SNS webhook confirmations are not missed
waitForDns: "30s"

#soa stands for Start of Authority and it's a type of record in a DNS
soa:
  # provider is the SOA provider used to verify DNS record readiness of this service
  provider: (( grab $SOA_PROVIDER || "" ))

########################################
# SNS - Webhooks AWS Configuration
########################################

# aws provides the AWS SNS configurations the webhooks library needs
aws:
  #AWS access key
  accessKey: (( grab $AWS_ACCESS_KEY || "accessKey" ))

  #AWS secret key
  secretKey: (( grab $AWS_SECRET_KEY || "secretKey" ))

  env: (( grab $AWS_ENV || "local-dev" ))

  sns:
    # awsEndpoint is the AWS endpoint
    # this must be left out in produ
    awsEndpoint: (( grab $AWS_ENDPOINT || "" ))

    #region is the AWS SNS region
    region: (( grab $AWS_REGION || "us-east-1" ))

    # topicArn describes the SNS topic this server needs to subscribe to
    topicArn: (( grab $AWS_SNS_TOPIC_ARN || "arn:aws:sns:us-east-1:000000000000:xmidt-local-caduceus" ))

    #urlPath is the URL path SNS will use to confirm a subscription with this server
    urlPath: "/api/v2/aws/sns"

########################################
# Argus - Webhooks Config
########################################
# migration describes how items should be pushed to Argus.
# (Optional) All the values below will be used as default
# if none is specified.
migration:
  # (Optional) owner will be the owner of the items inserted into Argus from SNS.
  # On the reading side of Argus then components can use this value to fetch
  # migrated items. If none is provided, the default is "hecate-migrate"
  owner: (( grab $ARGUS_OWNER || "" ))

  # (Optional) bucket is the partition name for storing the items.
  # If none is provided, the default is "webhooks"
  bucket: (( grab $ARGUS_BUCKET || "" ))

# argus is the configuration needed to setup the Argus client.
argus:
  # pullInterval provides how often the current webhooks list gets refreshed.
  pullInterval: (( grab $ARGUS_PULL_INTERVAL || "2s" ))

  adminToken: (( grab $ARGUS_ADMIN_TOKEN || "Hzu1WpIe7S8G" ))

  # address is Argus' network location.
  address: (( grab  $ARGUS_ENDPOINT || "http://argus:6600" ))

  # auth the authentication method for argus.
  auth:
    # basic configures basic authentication for argus.
    # Must be of form: 'Basic xyz=='
    basic: (( concat "Basic " authToken ))

#authtoken used to make spruce work better for authAcquirer
authToken: (( grab $AUTH_TOKEN || "dXNlcjpwYXNz" ))
