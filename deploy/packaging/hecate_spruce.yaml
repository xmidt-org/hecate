---
########################################
#   servers
########################################
servers:
  primary:
    address: :6700
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

  metrics:
    address: :6701
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

  health:
    address: :6702
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - (( grab server ))
      X-Midt-Version:
        - (( grab build ))

prometheus:
  defaultNamespace: xmidt
  defaultSubsystem: hecate

health:
  disableLogging: false
  custom:
    server: (( grab server ))

########################################
#   labeling/tracing via http headers configuration
########################################

# The unique fully-qualified-bucket-name of the server.
# (Optional)
server: (( grab $HOSTNAME || "hecate" ))

# Provides this build number to the X-transition-Build header for
# showing machine version information.  The build number SHOULD
# match the scheme `version-build` but there is not a strict requirement.
# (Optional)
build: (( grab $BUILD || "unknown" ))

# Provides the region information to the X-transition-Region header
# for showing what region this machine is located in.  The region
# is arbitrary and optional.
# (Optional)
region: east

# Provides the flavor information to the X-transition-Flavor header
# for showing what flavor this machine is associated with.  The flavor
# is arbitrary and optional.
# (Optional)
flavor: mint

# stage is used for doing complex spruce manipulation
# change this will only effect spruce and the vars referencing it
stage: (( grab $STAGE || "development" ))

########################################
#   Logging Related Configuration
########################################

# log configures the logging subsystem details
log:
  # file is the name of the most recent log file.  If set to "stdout" this
  # will log to os.Stdout.
  # (Optional) defaults to os.TempDir()
  file: "stdout"

  # level is the logging level to use - INFO, DEBUG, WARN, ERROR
  # (Optional) defaults to ERROR
  level: (( grab $LOG_LEVEL || "DEBUG" ))

  # maxsize is the maximum file size in MB
  # (Optional) defaults to max 100MB
  maxsize: 50

  # maxage is the maximum number of days to retain old log files
  # (Optional) defaults to ignore age limit (0)
  maxage: 30

  # maxbackups is the maximum number of old log files to retain
  # (Optional) defaults to retain all (0)
  maxbackups: 10

  # json is a flag indicating whether JSON logging output should be used.
  # (Optional) defaults to false
  json: true

########################################
# Upstream Config
########################################

# upstream provides guidance on where to pull webhooks from. Either aws or argus
# need to be set. aws is only used when argus is not set. AWS configuration
# cannot be nested under upstream due to restrictions in legacy code.
upstream: 
  # JWTParserType establishes which parser type will be used by the JWT token
  # acquirer used by Argus. Options include 'simple' and 'raw'.
  # Simple: parser assumes token payloads have the following structure: https://github.com/xmidt-org/bascule/blob/c011b128d6b95fa8358228535c63d1945347adaa/acquire/bearer.go#L77
  # Raw: parser assumes all of the token payload == JWT token
  # (Optional). Defaults to 'simple'.
  JWTParserType: (( grab $UPSTREAM_JWT_PARSER_TYPE || "raw" ))
  argus: 
    # listen is the subsection that configures the listening feature of the argus client
    # (Optional)
    listen:
      # pullInterval provides how often the current webhooks list gets refreshed.
      pullInterval: (( grab $UPSTREAM_ARGUS_PULL_INTERVAL || "5s" ))

    # bucket is the partition name where webhooks will be stored.
    bucket: (( grab $UPSTREAM_ARGUS_BUCKET || "webhooks" ))

    # address is Argus' network location.
    address: (( grab  $UPSTREAM_ARGUS_ENDPOINT || "http://argus0:6600" ))

    # auth the authentication method for argus.
    auth:
      # basic configures basic authentication for argus.
      # Must be of form: 'Basic xyz=='
      basic: (( concat "Basic " authToken ))
  #
  #    # jwt configures jwt style authentication for argus.
  #    JWT:
  #      # requestHeaders are added to the request for the token.
  #      # (Optional)
  #      # requestHeaders:
  #      #   "": ""
  #
  #      # authURL is the URL to access the token.
  #      authURL: ""
  #
  #      # timeout is how long the request to get the token will take before
  #      # timing out.
  #      timeout: "1m"
  #
  #      # buffer is the length of time before a token expires to get a new token.
  #      buffer: "2m"

########################################
# Downstream Config
########################################

# downstream provides guidance on where to push webhooks to.
downstream:
  # (Optional) owner will be the owner of the items inserted into Argus from SNS.
  # On the reading side of Argus then components can use this value to fetch
  # migrated items.
  owner: (( grab $ARGUS_OWNER || "" ))

  # argus is the configuration needed to setup the Argus client.
  argus:
    # address is Argus' network location.
    address: (( grab  $ARGUS_ENDPOINT || "http://argus1:6800" ))

    # (Optional) bucket is the partition name for storing the items.
    # If none is provided, the default is "webhooks"
    bucket: (( grab $ARGUS_BUCKET || "webhooks" ))

    # auth the authentication method for argus.
    auth:
      # basic configures basic authentication for argus.
      # Must be of form: 'Basic xyz=='
      basic: (( concat "Basic " authToken ))

#authtoken used to make spruce work better for authAcquirer
authToken: (( grab $AUTH_TOKEN || "dXNlcjpwYXNz" ))
